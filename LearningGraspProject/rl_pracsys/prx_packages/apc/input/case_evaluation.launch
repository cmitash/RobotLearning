<launch>  
  <rosparam file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <rosparam ns="planning/world_model/simulator/subsystems/mark_twain_huckleberry_finn" file="$(find manipulation)/input/objects/apc_items/feline_greenies_dental_treats.yaml" />
  
<!--   
   <rosparam ns="planning/world_model/simulator/subsystems/crayola_64_ct" file="$(find manipulation)/input/objects/apc_items/crayola_64_ct.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/highland_6539_self_stick_notes" file="$(find manipulation)/input/objects/apc_items/highland_6539_self_stick_notes.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/mark_twain_huckleberry_finn" file="$(find manipulation)/input/objects/apc_items/mark_twain_huckleberry_finn.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/feline_greenies_dental_treats" file="$(find manipulation)/input/objects/apc_items/feline_greenies_dental_treats.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/kyjen_squeakin_eggs_plush_puppies" file="$(find manipulation)/input/objects/apc_items/kyjen_squeakin_eggs_plush_puppies.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/champion_copper_plus_spark_plug" file="$(find manipulation)/input/objects/apc_items/champion_copper_plus_spark_plug.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/cheezit_big_original" file="$(find manipulation)/input/objects/apc_items/cheezit_big_original.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/munchkin_white_hot_duck_bath_toy" file="$(find manipulation)/input/objects/apc_items/munchkin_white_hot_duck_bath_toy.yaml" />

  <rosparam ns="planning/world_model/simulator/subsystems/rolodex_jumbo_pencil_cup" file="$(find manipulation)/input/objects/apc_items/rolodex_jumbo_pencil_cup.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/mommys_helper_outlet_plugs" file="$(find manipulation)/input/objects/apc_items/mommys_helper_outlet_plugs.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/stanley_66_052" file="$(find manipulation)/input/objects/apc_items/stanley_66_052.yaml" /> 
  <rosparam ns="planning/world_model/simulator/subsystems/elmers_washable_no_run_school_glue" file="$(find manipulation)/input/objects/apc_items/elmers_washable_no_run_school_glue.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/dr_browns_bottle_brush" file="$(find manipulation)/input/objects/apc_items/dr_browns_bottle_brush.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/kong_duck_dog_toy" file="$(find manipulation)/input/objects/apc_items/kong_duck_dog_toy.yaml" />
  <rosparam ns="planning/world_model/simulator/subsystems/oreo_mega_stuf" file="$(find manipulation)/input/objects/apc_items/oreo_mega_stuf.yaml" />-->

  <rosparam ns="planning">
    # random_seed: 14391835
    random_seed: 968514651
    simulate: false
    visualize: false
    persistent: false
    world_model:
      type: manipulation_world_model
      num_ik_seeds: 35
    type: single_query_application
    full_manipulator_context_name: manipulator_pc
  </rosparam>

  <rosparam ns="planning" file="$(find prx_input)/templates/spaces/space_types.yaml"/>  
  <rosparam ns="planning/world_model" file="$(find manipulation)/input/manipulation_simulator.yaml"/>  
  <rosparam ns="planning/world_model/simulator/subsystems/manipulator" file="$(find manipulation)/input/motoman/motoman_complete_kinect_reflex.yaml"/>

  <rosparam ns="planning/world_model/simulator/obstacles" file="$(find manipulation)/input/shelf.yaml"/>
  <rosparam ns="planning/world_model/simulator/obstacles" file="$(find apc)/input/bounding_boxes.yaml"/> 

  <rosparam ns="planning/world_model/planning_contexts">
    manipulator_pc:
      default:
        type: "hide_mapping"
    left_full_arm:
      default:
        type: "obstacle_mapping"
      manipulation_context_info:
        full_arm_context_name: "left_full_arm"
        arm_context_name: "left_arm"
        end_effector_context_name: "left_end_effector"
        start_link: "base_link"
        end_link: "head_sponge"
    left_arm:
      default:
        type: "obstacle_mapping"
      manipulation_context_info:
        full_arm_context_name: "left_full_arm"
        arm_context_name: "left_arm"
        end_effector_context_name: "left_end_effector"
        start_link: "base_link"
        end_link: "head_sponge"
    left_arm_planning:
      default:
        type: "hide_mapping"
      manipulation_context_info:
        full_arm_context_name: "left_full_arm"
        arm_context_name: "left_arm"
        end_effector_context_name: "left_end_effector"
        start_link: "base_link"
        end_link: "head_sponge"
    left_end_effector:
      default:
        type: "hide_mapping"
    right_full_arm:
      default:
        type: "obstacle_mapping"
      manipulation_context_info:
        full_arm_context_name: "right_full_arm"
        arm_context_name: "right_arm"
        end_effector_context_name: "right_end_effector"
        start_link: "base_link"
        end_link: "arm_right_reflex_virtual"
    right_arm:
      default:
        type: "obstacle_mapping"
      manipulation_context_info:
        full_arm_context_name: "right_full_arm"
        arm_context_name: "right_arm"
        end_effector_context_name: "right_end_effector"
        start_link: "base_link"
        end_link: "arm_right_reflex_virtual"
    right_arm_planning:
      default:
        type: "hide_mapping"
    right_end_effector:
      default:
        type: "hide_mapping"
  </rosparam>

  <rosparam ns="planning/world_model/simulator/subsystems/manipulator">
    ik_timeout: .005
    planning_contexts:
      manipulator_pc:
        type: "full_mapping"
      left_full_arm:
        type: "motoman_left_full_with_torso_state_mapping"
      left_camera:
        type: "motoman_left_full_with_torso_state_mapping"
      left_arm:
        type: "motoman_left_torso_state_mapping"
      left_end_effector:
        type: "motoman_left_gripper_state_mapping"
      left_arm_planning:
        type: "motoman_left_torso_state_mapping"
      right_full_arm:
        type: "motoman_right_full_with_torso_state_mapping"
      right_camera:
        type: "motoman_right_full_with_torso_state_mapping"
      right_arm:
        type: "motoman_right_torso_state_mapping"
      right_end_effector:
        type: "motoman_right_gripper_state_mapping"
      right_arm_planning:
        type: "motoman_right_torso_state_mapping"
  </rosparam>


  <rosparam ns="planning/graph_query_template">
    type: manipulation_query
    search_mode: lazy_search
    goal:
      type: multiple_goal_states
      distance_metric:
        type: graph_distance_metric
  </rosparam>
  <rosparam ns="planning/motion_query_template">
    type: motion_planning_query
    search_mode: lazy_search
    goal:
      type: multiple_goal_states
      distance_metric:
        type: graph_distance_metric
  </rosparam>

  <rosparam ns="planning/graph_specification_template">
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
    sampler:
      type: uniform_sampler
      default_orientation: [0,1,0,1]
      initial_sample: [0.80, 0, 1.20]
      min: [0.70,-.14,1.30]
      max: [0.90,0.14,1.60]
    distance_metric:
      type: graph_distance_metric
      distance_function: l_infinite_norm
    local_planner:
      type: bvp_local_planner
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 2500
    heuristic_search:
      type: constraints_astar_search
  </rosparam>

  <rosparam ns="planning/task_planner/">
    type: case_eval_task_planner
    stat_file: "case_stats.txt"
    specification:
      type: apc_driver_stress_specification
      sampler:
        type: uniform_sampler
    query:
      type: motion_planning_query
      query_type: add_query_points_collisions
      query_collision_type: lazy_collisions
      goal:
        type: multiple_goal_states
        distance_metric:
          type: graph_distance_metric
    left_context_name: "left_full_arm"
    right_context_name: "right_full_arm"
    manipulation_task_planner_name: "manipulation_task_planner"
    object_poses:
      - pose: [1.0875 0 1.445 0 0 0 1 ]
      - pose: [1.0875 0 1.445 0 0 0.38268 0.92388]
      - pose: [1.065 0 1.36 0.707107 0 0 0.707107 ]
      - pose: [1.0875 0 1.21 0 0 0 1 ]
      - pose: [1.0875 0 1.21 0 0 0.38268 0.92388]
      - pose: [1.065 0 1.12 0.707107 0 0 0.707107 ]
    planners:
      manipulation_task_planner:
        type: manipulation_tp
        use_ee_dist_in_planners: false
        constraints: 
          type: null_constraints
        specification:
          type: manipulation_specification
          validity_checker: 
            type: world_model_validity_checker
          sampler:
            type: uniform_sampler
          distance_metric:
            type: graph_distance_metric
          local_planner:
            type: bvp_local_planner
          stopping_criteria:
            elements:
              criterion1:
                type: iteration_criterion
                condition: 100
        num_candidate_connections: 30
        use_ee_dist_in_planners: false
        #serialize_flag: true
        IK_steer_grasping: false
        planners:
          left_arm_motion_planner:
            type: "prm_star"
            visualization_bodies: ["simulator/manipulator/head_sponge"]
            visualize_graph: false
            visualize: false
            visualize_solutions: false 
            deserialize_file: "left_arm_graph[8_k_top_middle_euclid].roadmap"
            # deserialize_folder: "left_arm_rrg"
            space_name: "left_arm_planning"
            planning_context_name: "left_arm"
            query:
              template: motion_query_template
              lazy_astar_iterations: 1000
            specification:
              template: graph_specification_template
              sampler:
                manipulation_context: left_full_arm
          right_arm_motion_planner:
            type: "prm_star"
            visualization_bodies: ["simulator/manipulator/arm_right_reflex_virtual"]
            visualize_graph: false
            visualize_solutions: false 
            visualize: false
            deserialize_file: "right_arm_graph[8_k_top_middle_euclid].roadmap"
            # deserialize_folder: "right_arm_rrg"
            space_name: "right_arm_planning"
            planning_context_name: "right_arm"
            query:
              template: motion_query_template
              lazy_astar_iterations: 1000
            specification:
              template: graph_specification_template
              sampler:
                manipulation_context: right_full_arm
          left_rrt_motion_planner:
            type: rrt
            goal_bias_rate: 0.5
            visualization_bodies: ["simulator/manipulator/head_sponge"]
            visualize_tree: false
            visualize: false
            visualize_solutions: false 
            space_name: "left_arm_planning"
            planning_context_name: "left_arm"
            is_connection_planner: true
            query:
              type: motion_planning_query
              goal:
                type: multiple_goal_states
                distance_metric:
                  type: graph_distance_metric
            specification:
              template: tree_specification_template
              sampler:
                manipulation_context: left_full_arm 
          right_rrt_motion_planner:
            type: rrt
            goal_bias_rate: 0.5
            visualization_bodies: ["simulator/manipulator/arm_right_reflex_virtual"]
            visualize_tree: false
            visualize: false
            visualize_solutions: false 
            space_name: "right_arm_planning"
            planning_context_name: "right_arm"
            is_connection_planner: true
            query:
              type: motion_planning_query
              goal:
                type: multiple_goal_states
                distance_metric:
                  type: graph_distance_metric
            specification:
              template: tree_specification_template
              sampler:
                manipulation_context: right_full_arm 
          grasping_planner:
            type: apc_grasping_planner
            data_folders: 
              left_full_arm: "prx_packages/manipulation/input/grasp_data/fused_unigripper/"
              right_full_arm: "prx_packages/manipulation/input/grasp_data/fused_reflex/"
            specification:
              type: grasping_specification
              validity_checker:
                type: world_model_validity_checker
  </rosparam>  
  <rosparam ns="planning/tree_specification_template">
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
      distance_function: l_infinite_norm
    local_planner:
      type: bvp_local_planner
      max_prop_length: 0.2
    stopping_criteria:
      criteria_check_type: 2
      elements:
        criterion1:
          type: iteration_criterion
          condition: 15000
        criterion2:
          type: goal_criterion
          criterion_type: goal
  </rosparam>

  <node name="planning" pkg="prx_planning" type="prx_planning" required="true" launch-prefix="" output="log" args="planning"/>

</launch>
