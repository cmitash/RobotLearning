<launch>  
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/simulators/default_simulator.yaml"/>  
  
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer" file="$(find prx_input)/templates/controllers/consumer.yaml"/>  
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/rigidbody" file="$(find manipulation)/input/motoman/test_cases/astar_rigid_body.yaml"/>

  <rosparam ns="simulation/simulator/obstacles" command="load" file="$(find manipulation)/input/motoman/test_cases/checkerboard.yaml" />

  <!-- BOXES -->
  <rosparam command="load" ns="simulation/simulator/subsystems/box1" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  <rosparam command="load" ns="simulation/simulator/subsystems/box2" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  <rosparam command="load" ns="simulation/simulator/subsystems/box3" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  <rosparam command="load" ns="simulation/simulator/subsystems/box4" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  
  <rosparam ns="simulation/simulator/subsystems/box1">
    initial_state: [0.5, 0.5, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 1.15, 0.2]
          material: red
  </rosparam>
  <rosparam ns="simulation/simulator/subsystems/box2">
    initial_state: [1.5, 1.5, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 1.15, 0.2]
          material: orange
  </rosparam>
  <rosparam ns="simulation/simulator/subsystems/box3">
    initial_state: [-0.5, 1.0, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 0.15, 0.2]
          material: yellow
  </rosparam>
  <rosparam ns="simulation/simulator/subsystems/box4">
    initial_state: [-0.5, 0.0, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 0.15, 0.2]
          material: green
  </rosparam>
  <!-- BOXES -->

  <rosparam ns="simulation/simulator/subsystems/consumer">
    keep_last_control: false
  </rosparam>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>

  <rosparam command="load" ns="planning">
    system_mapping:
      -
        pair: [simulator/consumer/rigidbody, world_model/simulator/rigidbody]
      -
        pair: [simulator/box1, world_model/simulator/box1]
      -
        pair: [simulator/box2, world_model/simulator/box2]
      -
        pair: [simulator/box3, world_model/simulator/box3]
      -
        pair: [simulator/box4, world_model/simulator/box4]
    consumer: simulator/consumer
    simulate: true
    visualize: true
    persistent: false
    consumer_mapping:
      - 
        pair: [simulator/consumer, rigidbody_pc]
    world_model:
      type: default_world_model
      num_ik_seeds: 10
  </rosparam>

  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/spaces/space_types.yaml"/>  
  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml" />
  <rosparam command="load" ns="planning/world_model" file="$(find prx_input)/templates/simulators/default_simulator.yaml"/>  
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/rigidbody" file="$(find manipulation)/input/motoman/test_cases/astar_rigid_body.yaml"/>

  <rosparam ns="planning/world_model/planning_contexts">
    rigidbody_pc:
      default:
        type: "obstacle_mapping"
  </rosparam>

  <rosparam ns="planning/world_model/simulator/subsystems/rigidbody">
    planning_contexts:
      rigidbody_pc:
        type: "full_mapping"
  </rosparam>

  <!-- BOXES -->
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/box1" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/box2" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/box3" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/box4" file="$(find manipulation)/input/motoman/test_cases/blocking_box.yaml" />

  <rosparam ns="planning/world_model/simulator/subsystems/box1">
    initial_state: [0.5, 0.5, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 1.15, 0.2]
          material: red
  </rosparam>
  <rosparam ns="planning/world_model/simulator/subsystems/box2">
    initial_state: [1.5, 1.5, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 1.15, 0.2]
          material: orange
  </rosparam>
  <rosparam ns="planning/world_model/simulator/subsystems/box3">
    initial_state: [-0.5, 1.0, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 0.15, 0.2]
          material: yellow
  </rosparam>
  <rosparam ns="planning/world_model/simulator/subsystems/box4">
    initial_state: [-0.5, 0.0, 0.1, 0, 0, 0, 1]
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.15, 0.15, 0.2]
          material: green
  </rosparam>
  <!-- BOXES -->

  <rosparam ns="planning/task_planner/">
    type: astar_test_tp
    specification:
      type: simple_pap_specification
      validity_checker:
        type: object_constraints_checker
    query:
      type: motion_planning_query
      query_type: add_query_points_collisions
      query_collision_type: lazy_collisions
      goal:
        type: multiple_goal_states
        distance_metric:
          type: ann_distance_metric    
    planners:
      left_arm_motion_planner:
        type: "prm_star"
        visualization_bodies: ["simulator/rigidbody/body"]
        visualize_graph: true
        visualize_solutions: false 
        visualize: false
        serialize_file: "left_arm_graph.roadmap"
        space_name: "left_arm_planning"
        planning_context_name: "left_arm"
        query:
          type: motion_planning_query
          query_type: add_query_points_colalisions
          query_collision_type: lazy_collisions
          goal:
            type: multiple_goal_states
            distance_metric:
              type: ann_distance_metric
        specification:
          type: motion_planning_specification
          validity_checker: 
            type: world_model_validity_checker
          sampler:
            type: uniform_sampler
          distance_metric:
            type: graph_distance_metric
          local_planner:
            type: bvp_local_planner
          stopping_criteria:
            elements:
              criterion1:
                type: iteration_criterion
                condition: 200
          heuristic_search:
            type: constraints_astar_search
            mode: repropagate_info
            mcr_mode: shortest
  </rosparam>


  <node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="" output="screen" args="planning"/>


  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>

  <rosparam ns="visualization/viewer/">
    windows:
      window_1:
        xpos: 900
        ypos: 10
        width: 1000
        height: 1000
        cameras:
          perspective:
            ortho: false
            camera_type: 0
            eye: [0, 0, 1.8]
            center: [1, 0, 0]
            speed: {move: 0.05, rotate: 0.001}
          orthographic:
            ortho: true
            ortho_param:
              left: -3
              right: 1
              bottom: -3
              top: 1
              zNear: 0
              zFar: 1000
            speed: {move: 0.05, rotate: 0.001}
          smooth:
            ortho: false
            camera_type: 2
            eye: [0, -20, 15]
            center: [0, 1, 18]
            speed: {move: 0.05, rotate: 0.001}
  </rosparam>

</launch>
