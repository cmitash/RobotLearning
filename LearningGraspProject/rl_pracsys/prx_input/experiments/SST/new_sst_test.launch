<launch>  
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/simulators/default_simulator.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/rover" file="$(find prx_input)/templates/plants/second_order_car_learned.yaml"/>

  <rosparam ns="simulation/simulator/subsystems/consumer">
    keep_last_control: false
  </rosparam>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>

  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml" />
  <rosparam ns="planning/world_model" command="load" file="$(find prx_input)/templates/simulators/default_simulator.yaml"/>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/rover" file="$(find prx_input)/templates/plants/second_order_car_learned.yaml"/>
  
  <rosparam command="load" ns="planning">
    system_mapping:
      -
        pair: [simulator/consumer/rover, world_model/simulator/rover]
    consumer: simulator/consumer
    # random_seed: 5646
    random_seed: 14391835
    simulate: true
    visualize: true
    persistent: false
    consumer_mapping:
      - 
        pair: [simulator/consumer, full_space]
    world_model:
      type: default_world_model
  </rosparam>

  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
  <rosparam ns="planning/task_planner/" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>

<rosparam ns="planning/task_planner/planners/" >
planner1:
  template: "motion_planner"
  type: rrt
  space_name: full_space
  visualization_body: "simulator/rover/chassis"
  visualize_tree: true
  visualize_solution: false
  max_points: 20000
  steering: false
  branches: 10
  specification:
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
      cost_function: duration_cost
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: time_varying_local_planner
      lower_multiple: 30
      upper_multiple: 50
    seeds:
      -
        state: [ 0 0 0 0 0]
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 10000
  query:
    template: "query_type"
    start_state: [ 0 0 0 0 0]
    search_mode: standard
    goal:
      type: radial_goal_region
      distance_metric:
        type: ann_distance_metric
      radius: 3
      accepted_threshold: .6
      state_size: 5
      goal_state: [ 10 20 0 0 0]
</rosparam>
       <!-- 
  <rosparam ns="planning/task_planner/" >
    stats_criteria:
      elements:
        criterion1:
          condition: 1000
          type: iteration_criterion
  </rosparam> -->
  <rosparam ns="planning/task_planner/" >
    specification: 
      type: single_shot_specification
    query:
      type: single_shot_query
  </rosparam>
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>

  <node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="" output="screen" args="planning"/>



  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>

  <rosparam ns="visualization/viewer/">
    windows:
      window_1:
        xpos: 920
        ypos: 100
        width: 1000
        height: 1000
        cameras:
          perspective:
            ortho: false
            camera_type: 0
            eye: [0, 0, 1.8]
            center: [1, 0, 0]
            speed: {move: 0.1, rotate: 0.001}
          orthographic:
            ortho: true
            ortho_param:
              left: -300
              right: 300
              bottom: -300
              top: 300
              zNear: 0
              zFar: 1000
            speed: {move: 0.2, rotate: 0.001}
          smooth:
            ortho: false
            camera_type: 2
            eye: [0, -20, 15]
            center: [0, 1, 18]
            speed: {move: 0.2, rotate: 0.001}
  </rosparam>

</launch>